# Form implementation generated from reading ui file 'MainWindow'
#
# Created by: PyQt6 UI code generator 6.2.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PySide6 import QtCore, QtWidgets
from PySide6.QtCore import QPoint
from PySide6.QtGui import Qt, QIcon
from PySide6.QtWidgets import QMainWindow, QPushButton

from Windows.ImageProcessWidget.ImageScreenWidget_Form import ImageScreenWidget_Form
from Windows.MainWindow.MainWindow_Controller import MainWindow_Controller
from Windows.MainWindow.MainWindow_View import Ui_MainWindow


class MainWindow_Form(QMainWindow, MainWindow_Controller):
    def __init__(self):
        super(MainWindow_Form, self).__init__()
        #self.setupUi(self)

        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.initilizeComponent()

    def initilizeComponent(self):

        self.frm_leftToolsContents_isOpen = False
        #self.ui.wgtstck_middle_content_processImage.
        # region window settings
        self.setWindowFlag(QtCore.Qt.FramelessWindowHint)
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.setWindowOpacity(1)
        self.isScreenModeNormal = True
        self.ui.frm_left_content_right_menuContent.setMaximumWidth(0)
        # endregion

        # region button connects
        self.ui.pbtn_minimise.clicked.connect(self.pbtn_minimise_clicked)
        self.ui.pbtn_exit.clicked.connect(self.pbtn_exit_clicked)
        self.ui.pbtn_expand.clicked.connect(self.pbtn_expand_clicked)

        # endregion

        # region buttons
        # left content menu buttons
        self.ui.pbtn_left_menu_openClose.clicked.connect(self.pbtn_left_menu_openClose_clicked)

        self.frm_left_menu_tool_selected_pbtn = None
        self.ui.pbtn_frm_left_menu_tool_project.clicked.connect(self.pbtn_left_menu_tool_clicked)
        self.ui.pbtn_frm_left_menu_tool_images.clicked.connect(self.pbtn_left_menu_tool_clicked)
        self.ui.pbtn_frm_left_menu_tool_preProcess.clicked.connect(self.pbtn_left_menu_tool_clicked)
        self.ui.pbtn_frm_left_menu_tool_segmentation.clicked.connect(self.pbtn_left_menu_tool_clicked)
        self.ui.pbtn_frm_left_menu_tool_edit.clicked.connect(self.pbtn_left_menu_tool_clicked)
        self.ui.pbtn_frm_left_menu_tool_3d.clicked.connect(self.pbtn_left_menu_tool_clicked)
        self.ui.pbtn_frm_left_menu_tool_analyse.clicked.connect(self.pbtn_left_menu_tool_clicked)
        self.ui.pbtn_frm_left_menu_tool_report.clicked.connect(self.pbtn_left_menu_tool_clicked)
        self.ui.pbtn_frm_left_menu_tool_settings.clicked.connect(self.pbtn_left_menu_tool_clicked)
        self.ui.pbtn_frm_left_menu_tool_about.clicked.connect(self.pbtn_left_menu_tool_clicked)
        self.ui.pbtn_frm_left_menu_tool_help.clicked.connect(self.pbtn_left_menu_tool_clicked)
        ###
        # left content images menu buttons
        self.ui.pbtn_right_menu_tool_images_loadImages.clicked.connect(self.pbtn_right_menu_tool_images_loadImages_clicked)

        self.ui.lstw_left_menuContent_images_rawImages.selectionModel().selectionChanged.connect(self.lstw_left_menuContent_images_rawImages_selectionChanged)
        self.ui.lstw_left_menuContent_images_processingImages.selectionModel().selectionChanged.connect(self.lstw_left_menuContent_images_processingImages_selectionChanged)

        ###
        # left content project menu buttons
        self.ui.pbtn_right_menu_tool_project_openProject.clicked.connect(self.pbtn_right_menu_tool_project_openProject_clicked)
        self.ui.pbtn_right_menu_tool_project_createProject.clicked.connect(self.pbtn_right_menu_tool_project_createProject_clicked)
        self.ui.pbtn_right_menu_tool_project_saveProject.clicked.connect(self.pbtn_right_menu_tool_project_saveProject_clicked)
        ###
        # right content buttons
        self.ui.pbtn_right_content_openClose.clicked.connect(self.pbtn_right_content_openClose_clicked)
        # region content add

        #self.grapvw_sceneImage = Bat_QGraphicsView(self.ui.frm_middle_content_processImage_imageView_scane)
        self.grapvw_sceneImage = ImageScreenWidget_Form()


        self.ui.horizontalLayout_11.addWidget(self.grapvw_sceneImage)
        self.grapvw_sceneImage.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        #sizePolicy.setHeightForWidth(self.ui.frm_middle_content_processImage_imageView_scane.sizePolicy().hasHeightForWidth())

        #sizePolicy.setHeightForWidth(self.ui.frm_middle_content_processImage_imageView_scane.parent().sizePolicy().hasHeightForWidth())
        self.grapvw_sceneImage.setSizePolicy(sizePolicy)
        self.grapvw_sceneImage.ui.hsldr_frm_image_process_image_number.valueChanged.connect(self.hsldr_frm_image_process_image_number_valueChanged)
        #self.grapvw_sceneImage.ui.spnbx_frm_image_process_image_number.valueChanged.connect(self.spnbx_frm_image_process_image_number_valueChanged)

        #self.grapvw_sceneImage.setMinimumSize(QtCore.QSize(self.ui.frm_middle_content_processImage_imageView_scane.parent().width(),self.ui.frm_middle_content_processImage_imageView_scane.parent().height()))
        #self.grapvw_sceneImage.setInteractive(True)
        #self.grapvw_sceneImage.toggleDragMode()


        #self.grapvw_sceneImage.sizePolicy().setHeightForWidth(self.ui.wgt_middle_content_processImage_ImageView.sizePolicy().hasHeightForWidth())
        #self.ui.wgt_middle_content_processImage_ImageView.setLayout()
        #self.ui.frm_middle_content_processImage_ImageView.repaint()
        #self.grapvw_sceneImage.fitInView()
        #sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        #sizePolicy.setHorizontalStretch(0)
        #sizePolicy.setVerticalStretch(0)
        #sizePolicy.setHeightForWidth(self.frm_middle_content_processImage_ImageView.sizePolicy().hasHeightForWidth())
        #self.grapvw_sceneImage.setSizePolicy(self.ui.frm_middle_content_processImage_ImageView.sizePolicy())
        #self.grapvw_sceneImage.setMinimumSize(self.ui.frm_middle_content_processImage_ImageView.size())
        #self.grapvw_sceneImage.setInteractive(True)

        #self.grapvw_sceneImage.toggleDragMode()

        # endregion
        return

        # action #1
    def mousePressEvent(self, event):
        if event.buttons() == Qt.LeftButton and self.ui.wgt_top.rect().contains(event.position().toPoint(),True):
            self.oldPosition = event.globalPosition().toPoint()

        # action #2
    def mouseMoveEvent(self, event):
        if event.buttons() == Qt.LeftButton and self.ui.wgt_top.rect().contains(event.position().toPoint(),True):
            delta = QPoint(event.globalPosition().toPoint() - self.oldPosition)
            if (self.y() + delta.y()) < 0:
                return
            self.move(self.x() + delta.x(), self.y() + delta.y())
            self.oldPosition = event.globalPosition().toPoint()
            self.setScreen(app.screenAt(self.oldPosition))
            if self.y() <= 5:
                self.setFullScreen()
            elif self.y() >= 20:
                self.setNormalScreen()


    def setFullScreen(self):

        if self.isScreenModeNormal:
            print(self.isScreenModeNormal)
            self.ui.pbtn_expand.setToolTip("Minimize")
            self.ui.pbtn_expand.setIcon(QIcon("../Resources/Icons/yellow/minimize-2.svg"))
            #self.showFullScreen()
            screen_resolution = self.screen().availableGeometry()
            self.resize(screen_resolution.width(), screen_resolution.height())

            #self.setScreen(app.primaryScreen())
            self.move(0,0)
            self.isScreenModeNormal=False

    def setNormalScreen(self):
        if not self.isScreenModeNormal:
            self.ui.pbtn_expand.setToolTip("Maximize")
            self.ui.pbtn_expand.setIcon(QIcon("../Resources/Icons/yellow/maximize-2.svg"))
            self.showNormal()
            self.resize(1465, 849)
            self.isScreenModeNormal = True

    def frm_left_content_left_menuTools_OpenClose_switchAction(self):
        width = self.ui.frm_left_menuTools.width()
        newWidth = 0
        if width >= 122:
            newWidth = self.ui.pbtn_left_menu_openClose.width()+1
            self.ui.pbtn_left_menu_openClose.setToolTip("Open Menu")
            self.ui.pbtn_left_menu_openClose.setIcon(QIcon("../Resources/Icons/yellow/menu.svg"))
        else:
            newWidth = 122
            self.ui.pbtn_left_menu_openClose.setToolTip("Hide Menu")
            self.ui.pbtn_left_menu_openClose.setIcon(QIcon("../Resources/Icons/yellow/chevrons-left.svg"))
        self.ui.frm_left_menuTools.setMaximumWidth(newWidth)

    def frm_left_content_right_menuContent_switchAction(self, pbtn:QPushButton):
        width = self.ui.frm_left_content_right_menuContent.width()
        newWidth = 0
        if width >= 100:
            newWidth = 0
        else:
            newWidth = 300

        if self.frm_left_menu_tool_selected_pbtn == None:
            self.frm_left_menu_tool_selected_pbtn=pbtn

        if self.frm_left_menu_tool_selected_pbtn == pbtn:
                if self.frm_leftToolsContents_isOpen:
                    self.ui.frm_left_content_right_menuContent.setMaximumWidth(0)
                    self.frm_left_menu_tool_selected_pbtn.setChecked(False)
                    self.frm_leftToolsContents_isOpen = False
                    return
                else:
                    self.ui.frm_left_content_right_menuContent.setMaximumWidth(300)
                    self.frm_left_menu_tool_selected_pbtn.setChecked(True)
                    self.frm_leftToolsContents_isOpen = True
                    #self.frm_left_menu_tool_selected_pbtn.setChecked(False)
        else:

            self.ui.frm_left_content_right_menuContent.setMaximumWidth(300)
            self.frm_left_menu_tool_selected_pbtn.setChecked(False)
            self.frm_leftToolsContents_isOpen = True
            self.frm_left_menu_tool_selected_pbtn = pbtn
            pbtn.setChecked(True)


        self.ui.lbl_left_content_right_menuContent_title_menuTitle.setText(pbtn.text())
        self.ui.pbtn_left_content_right_menuContent_title_menuIcon.setIcon(self.frm_left_menu_tool_selected_pbtn.icon())

        #for button in self.ui.frm_leftToolsContents.findChildren(QPushButton):
        #    button.setChecked(False)

        #pbtn.setChecked(True)

        match pbtn.text():
            case "Project":
                self.ui.wgtstck_left_content_right_menuContent.setCurrentWidget(self.ui.page_left_content_right_menuContents_project)
            case "Images":
                self.ui.wgtstck_left_content_right_menuContent.setCurrentWidget(self.ui.page_left_content_right_menuContent_images)
    def frm_right_content_openClose_switchAction(self):
        width = self.ui.frm_right_content.width()
        newWidth = 0
        if width >= 230:
            newWidth = self.ui.pbtn_right_content_openClose.width()
            self.ui.pbtn_right_content_openClose.setToolTip("Open Menu")
            self.ui.pbtn_right_content_openClose.setIcon(QIcon("../Resources/Icons/yellow/menu.svg"))
        else:
            newWidth = 232
            self.ui.pbtn_right_content_openClose.setToolTip("Hide Menu")
            self.ui.pbtn_right_content_openClose.setIcon(QIcon("../Resources/Icons/yellow/chevrons-right.svg"))
        self.ui.frm_right_content.setMinimumWidth(newWidth)
        self.ui.frm_right_content.setMaximumWidth(newWidth)
    def wgtstck_middle_content_switchAction(self, pbtn:QPushButton):
        if self.frm_left_menu_tool_selected_pbtn == None:
            self.frm_left_menu_tool_selected_pbtn = pbtn

        self.ui.lbl_left_content_right_menuContent_title_menuTitle.setText(pbtn.text())
        match pbtn.text():
            case "Project":
                self.ui.wgtstck_middle_content.setCurrentWidget(self.ui.page_middle_content_processImage)
            case "Images":
                self.ui.wgtstck_middle_content.setCurrentWidget(self.ui.page_middle_content_processImage)
            case "Analyse":
                self.ui.wgtstck_middle_content.setCurrentWidget(self.ui.page_middle_content_analyse)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MyMainWindow = MainWindow_Form()
    MyMainWindow.show()
    sys.exit(app.exec())